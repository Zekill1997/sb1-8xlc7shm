const { databaseService } = require('../services/databaseService');

// Script pour v√©rifier la compatibilit√© des communes et cr√©er des assignations
async function checkAndCreateAssignments() {
  console.log('üîç V√âRIFICATION DE LA COMPATIBILIT√â DES COMMUNES ET CR√âATION D\'ASSIGNATIONS');
  
  try {
    // 1. R√©cup√©rer tous les utilisateurs
    console.log('üìä R√©cup√©ration de tous les utilisateurs...');
    const allUsers = await databaseService.getAllUsers();
    
    const encadreurs = allUsers.filter(u => u.role === 'ENCADREUR');
    const parents = allUsers.filter(u => u.role === 'PARENT_ELEVE');
    const admins = allUsers.filter(u => u.role === 'ADMINISTRATEUR');
    
    console.log(`üìä Statistiques actuelles:`);
    console.log(`   - Encadreurs: ${encadreurs.length}`);
    console.log(`   - Parents/√âl√®ves: ${parents.length}`);
    console.log(`   - Administrateurs: ${admins.length}`);
    
    if (encadreurs.length === 0 || parents.length === 0) {
      console.log('‚ùå Pas assez d\'utilisateurs pour v√©rifier la compatibilit√©');
      return;
    }
    
    // 2. Identifier les paires compatibles (m√™me commune)
    console.log('\nüîç RECHERCHE DE PAIRES COMPATIBLES:');
    
    // Grouper par commune
    const communeGroups = {};
    
    // Initialiser les groupes pour les encadreurs avec commune d√©finie
    for (const encadreur of encadreurs) {
      const commune = encadreur.communeIntervention;
      if (commune) {
        if (!communeGroups[commune]) {
          communeGroups[commune] = { parents: [], encadreurs: [] };
        }
        communeGroups[commune].encadreurs.push(encadreur);
      }
    }
    
    // Ajouter les parents avec commune d√©finie
    for (const parent of parents) {
      const commune = parent.communeApprenant;
      if (commune) {
        if (!communeGroups[commune]) {
          communeGroups[commune] = { parents: [], encadreurs: [] };
        }
        communeGroups[commune].parents.push(parent);
      }
    }
    
    // Afficher les statistiques par commune
    console.log('\nüìä STATISTIQUES PAR COMMUNE:');
    
    for (const [commune, group] of Object.entries(communeGroups)) {
      console.log(`\n   üèôÔ∏è ${commune}:`);
      console.log(`      - Parents/√âl√®ves: ${group.parents.length}`);
      console.log(`      - Encadreurs: ${group.encadreurs.length}`);
      
      if (group.parents.length > 0 && group.encadreurs.length > 0) {
        console.log(`      ‚úÖ Compatibilit√© possible dans cette commune`);
      } else if (group.parents.length > 0) {
        console.log(`      ‚ùå Aucun encadreur disponible dans cette commune`);
      } else if (group.encadreurs.length > 0) {
        console.log(`      ‚ùå Aucun parent/√©l√®ve disponible dans cette commune`);
      }
    }
    
    // 3. Cr√©er des assignations pour les communes avec des paires compatibles
    console.log('\nüîó CR√âATION D\'ASSIGNATIONS:');
    
    // Trouver un administrateur pour l'assignation
    const admin = admins[0];
    if (!admin) {
      console.error('‚ùå Aucun administrateur trouv√© pour cr√©er des assignations');
      return;
    }
    
    let assignmentCount = 0;
    
    for (const [commune, group] of Object.entries(communeGroups)) {
      if (group.parents.length > 0 && group.encadreurs.length > 0) {
        console.log(`\n   üèôÔ∏è ${commune}:`);
        
        // Pour chaque parent, trouver un encadreur compatible
        for (const parent of group.parents) {
          // V√©rifier si le parent a d√©j√† un encadreur assign√©
          if (parent.assignedEncadreur) {
            console.log(`      - ${parent.prenomsApprenant || ''} ${parent.nomApprenant || ''} a d√©j√† un encadreur assign√©`);
            continue;
          }
          
          // Trouver les encadreurs disponibles (pas encore √† capacit√© maximale)
          const availableEncadreurs = group.encadreurs.filter(e => 
            e.assignedStudents.length < e.maxStudents
          );
          
          if (availableEncadreurs.length === 0) {
            console.log(`      - Aucun encadreur disponible pour ${parent.prenomsApprenant || ''} ${parent.nomApprenant || ''}`);
            continue;
          }
          
          // Choisir le premier encadreur disponible
          const encadreur = availableEncadreurs[0];
          
          console.log(`      - Cr√©ation d'assignation: ${parent.prenomsApprenant || ''} ${parent.nomApprenant || ''} -> ${encadreur.prenoms || ''} ${encadreur.nom || ''}`);
          
          // Calculer le score de compatibilit√©
          let compatibilityScore = 0.75; // Score de base
          
          // V√©rifier les disciplines (pour les classes coll√®ge/lyc√©e)
          if (parent.besoins && parent.besoins.length > 0 && encadreur.disciplines && encadreur.disciplines.length > 0) {
            const matchingDisciplines = parent.besoins.filter(b => 
              encadreur.disciplines.includes(b)
            );
            
            if (matchingDisciplines.length > 0) {
              compatibilityScore += 0.25 * (matchingDisciplines.length / parent.besoins.length);
            }
          }
          
          // Limiter √† 1.0 maximum
          compatibilityScore = Math.min(compatibilityScore, 1.0);
          
          console.log(`        - Compatibilit√©: ${(compatibilityScore * 100).toFixed(0)}%`);
          
          // Cr√©er l'assignation
          const criteria = {
            commune: true,
            disciplines: parent.besoins && encadreur.disciplines ? 
              parent.besoins.some(b => encadreur.disciplines.includes(b)) : false,
            classe: encadreur.classesEnseignement && parent.classeApprenant ? 
              encadreur.classesEnseignement.includes(parent.classeApprenant) : false
          };
          
          try {
            const result = await databaseService.createAssignmentWithCommuneCheck(
              parent.id,
              encadreur.id,
              compatibilityScore,
              criteria,
              admin.id
            );
            
            if (result.success) {
              console.log(`        ‚úÖ Assignation cr√©√©e avec succ√®s! ID: ${result.assignmentId}`);
              assignmentCount++;
            } else {
              console.log(`        ‚ùå Erreur: ${result.error}`);
            }
          } catch (error) {
            console.error(`        ‚ùå Erreur: ${error}`);
          }
        }
      }
    }
    
    console.log(`\n‚úÖ OP√âRATION TERMIN√âE: ${assignmentCount} assignation(s) cr√©√©e(s)`);
    
    // 4. Afficher les utilisateurs sans commune d√©finie
    const encadreursWithoutCommune = encadreurs.filter(e => !e.communeIntervention);
    const parentsWithoutCommune = parents.filter(p => !p.communeApprenant);
    
    if (encadreursWithoutCommune.length > 0 || parentsWithoutCommune.length > 0) {
      console.log('\n‚ö†Ô∏è UTILISATEURS SANS COMMUNE D√âFINIE (NON MODIFI√âS):');
      
      if (encadreursWithoutCommune.length > 0) {
        console.log(`   - ${encadreursWithoutCommune.length} encadreur(s) sans commune d'intervention d√©finie:`);
        for (const encadreur of encadreursWithoutCommune) {
          console.log(`     * ${encadreur.prenoms || ''} ${encadreur.nom || ''} (${encadreur.email})`);
        }
      }
      
      if (parentsWithoutCommune.length > 0) {
        console.log(`   - ${parentsWithoutCommune.length} parent(s)/√©l√®ve(s) sans commune d√©finie:`);
        for (const parent of parentsWithoutCommune) {
          console.log(`     * ${parent.prenomsApprenant || ''} ${parent.nomApprenant || ''} (${parent.email})`);
        }
      }
      
      console.log('\nüí° CONSEIL: Pour ces utilisateurs, vous devrez d√©finir manuellement leur commune pour qu\'ils puissent √™tre assign√©s.');
    }
    
  } catch (error) {
    console.error('‚ùå ERREUR LORS DE L\'OP√âRATION:', error);
  }
}

// Ex√©cuter le script
checkAndCreateAssignments()
  .then(() => {
    console.log('üéâ Script termin√©');
  })
  .catch(error => {
    console.error('‚ùå Erreur lors de l\'ex√©cution du script:', error);
  });